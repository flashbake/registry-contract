import NetworkConfig from './types/network-config';
import { TezosToolkit } from "@taquito/taquito";
export declare const getStorageValue: (targetContract: string, storageField: string, tezos: TezosToolkit) => Promise<any>;
export declare const validateStorageValue: (targetContract: string, storageField: string, expected: any, tezos: TezosToolkit) => Promise<void>;
export declare const validateBreakGlass: (targetContract: string, targetStorageField: string, breakGlassContract: string, breakGlassMsig: string, dao: string, tezos: TezosToolkit) => Promise<void>;
export declare const verifyDAOIntegrationWithBreakGlass: (vestingVaultContractAddress: string, breakGlassContract: string | null, targetAddress: string, entryPoint: string, entryArguments: string, entryArgumentType: string, daoAddress: string, propertyName: string, expectedValue: any, tezos: TezosToolkit, config: NetworkConfig) => Promise<void>;
export declare const verifyBreakGlassIntegration: (breakGlassAddress: string, targetAddress: string, multisigAddress: string, newGovernor: string, tezos: TezosToolkit, config: NetworkConfig) => Promise<void>;
export declare const breakGlass: (breakGlassAddress: string, multisigAddress: string, newGovernor: string, tezos: TezosToolkit, config: NetworkConfig) => Promise<{
    submissionResult: import("@taquito/taquito").TransactionOperation;
    executeResult: import("@taquito/taquito").TransactionOperation;
}>;
export declare const validateMetadata: (contractAddress: string, tezos: TezosToolkit) => Promise<void>;
