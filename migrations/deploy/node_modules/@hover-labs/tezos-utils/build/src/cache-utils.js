"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchFromCache = exports.fetchFromCacheOrRun = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const CACHE_FILE = path_1.default.join(process.cwd(), '/deploy-data.json');
async function fetchFromCacheOrRun(key, runFunction) {
    const deployCache = await getCache();
    if (deployCache.hasOwnProperty(key)) {
        console.log(`Loaded '${key}' from the cache!`);
        return deployCache[key];
    }
    else {
        let result = await runFunction();
        if (result === undefined) {
            result = true;
        }
        deployCache[key] = result;
        fs_1.default.writeFileSync(CACHE_FILE, JSON.stringify(deployCache, null, 2));
        return result;
    }
}
exports.fetchFromCacheOrRun = fetchFromCacheOrRun;
async function fetchFromCache(key) {
    const deployCache = await getCache();
    if (deployCache.hasOwnProperty(key)) {
        return deployCache[key];
    }
    else {
        throw new Error(`key '${key}' not found in cache`);
    }
}
exports.fetchFromCache = fetchFromCache;
async function getCache() {
    if (!fs_1.default.existsSync(CACHE_FILE)) {
        console.log(`Creating a new deploy cache at ${CACHE_FILE}`);
        fs_1.default.writeFileSync(CACHE_FILE, JSON.stringify({
            created: new Date()
        }));
    }
    return JSON.parse(fs_1.default.readFileSync(CACHE_FILE).toString());
}
//# sourceMappingURL=cache-utils.js.map