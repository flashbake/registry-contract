"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const axios = require('axios').default;
const bignumber_js_1 = require("bignumber.js");
const checkConfirmed = async (config, operationHash) => {
    await (0, utils_1.sleep)((config.requiredConfirmations) * config.operationDelaySecs);
    const operationStatusUrl = `${config.betterCallDevUrl}/opg/${operationHash}`;
    const headUrl = `${config.tezosNodeUrl}/chains/main/blocks/head/header`;
    for (let currentTry = 0; currentTry < config.maxConfirmationPollingRetries; currentTry++) {
        try {
            const operationDataResult = await axios.get(operationStatusUrl);
            if (operationDataResult.status != 200) {
                throw new Error(`Got status code ${operationDataResult.status} when querying operation status`);
            }
            const operationData = operationDataResult.data[0];
            const headResult = await axios.get(headUrl);
            if (headResult.status != 200) {
                throw new Error(`Got status code ${headResult.status} when querying operation status.`);
            }
            const headData = headResult.data;
            if (operationData.status !== 'applied') {
                throw new Error(`Operation is not applied! Current status: ${operationData.status}`);
            }
            const headLevel = new bignumber_js_1.BigNumber(headData.level);
            const operationLevel = new bignumber_js_1.BigNumber(operationData.level);
            const delta = headLevel.minus(operationLevel);
            if (delta.isLessThan(config.requiredConfirmations)) {
                throw new Error(`Did not have required number of confirmations. Head: ${headLevel.toFixed()}, Operation: ${operationLevel.toFixed()}`);
            }
            return;
        }
        catch (e) {
            console.log(`Caught exception while polling ${e}`);
            console.log(`(Try ${currentTry + 1} of ${config.maxConfirmationPollingRetries})`);
            await (0, utils_1.sleep)(config.operationDelaySecs);
        }
    }
    throw new Error(`Could not confirm operation ${operationHash}`);
};
exports.default = checkConfirmed;
//# sourceMappingURL=check-confirmed.js.map