/** Utils for integration testing with the DAO */

import { TezosToolkit } from '@taquito/taquito'
import checkConfirmed from './check-confirmed'
import { Parser } from "@taquito/michel-codec";
import { sleep } from './utils'
import NetworkConfig from './types/network-config';
import { compileBreakGlassOperation } from './lambda-utils'

export const executeGovProposal = async (
  vestingVaultContractAddress: string,
  breakGlassContract: string | null,
  targetAddress: string,
  entryPoint: string,
  entryArguments: string,
  entryArgumentType: string,
  daoAddress: string,
  tezos: TezosToolkit,
  config: NetworkConfig
) => {
  const vestingVaultContract = await tezos.contract.at(vestingVaultContractAddress)

  let compiledLambda: string
  if (breakGlassContract !== null) {
    console.log(`           - Compiling break glass operation...`)
    compiledLambda = compileBreakGlassOperation(
      targetAddress, entryPoint, entryArguments,
      entryArgumentType, breakGlassContract as string
    )
  } else {
    throw new Error("Tried to compile a non-break glass lambda!")
  }

  const michelsonParser = new Parser()
  const lambdaObject = michelsonParser.parseMichelineExpression(compiledLambda)

  console.log("           - Submitting proposal...")
  const proposalSubmission = tezos.contract.batch([])
    .withContractCall(
      vestingVaultContract.methods.propose(
        config.escrowAmount,
        "Some Title",
        "http://some.description.link",
        "some-hash-here",
        lambdaObject
      )
    )

  const submissionOp = await proposalSubmission.send()
  await checkConfirmed(config, submissionOp.hash)
  console.log("           - Proposal injected in", submissionOp.hash)

  // Pass the proposal
  console.log("           - Voting yay...")
  const voteOp = await vestingVaultContract.methods.vote(0).send()
  await checkConfirmed(config, voteOp.hash)
  console.log("           - Vote injected in", voteOp.hash)

  // Wait voting to end
  await sleep((config.governanceVoteLength * config.operationDelaySecs) * 1.1)

  console.log("           - Ending vote...")
  const dao = await tezos.contract.at(daoAddress)
  const endVotingOp = await dao.methods.endVoting(null).send()
  await checkConfirmed(config, endVotingOp.hash)
  console.log("           - endVoting injected in", endVotingOp.hash)

  // Ensure timelock completed
  await sleep((config.governanceTimelockLength * config.operationDelaySecs) * 1.1)

  console.log("           - Executing timelock...")
  const executeTimelockOp = await vestingVaultContract.methods.executeTimelock(null).send()
  console.log("           - Executing timelock injected in", executeTimelockOp.hash)
  await checkConfirmed(config, executeTimelockOp.hash)
}
