/** General utility functions */

import fs from 'fs'
import { getLogger, LogLevelDesc } from 'loglevel'
import { registerFetch, registerLogger } from 'conseiljs'
import NetworkConfig from './types/network-config'

/** Initialize ConseilJS */
export function initConseil(conseilLogLevel: LogLevelDesc): void {
    const logger = getLogger('conseiljs')
    logger.setLevel(conseilLogLevel, false)

    registerLogger(logger)
    registerFetch(fetch)
}

/** Load a contract from disk. */
export function loadContract(filename: string): string {
    return fs.readFileSync(filename).toString()
}

/** Sleep for the givn number of seconds. */
export async function sleep(seconds: number): Promise<void> {
    const milliseconds = seconds * 1000
    return new Promise((resolve) => setTimeout(resolve, milliseconds))
}

/** Print a network config */
export async function printConfig(config: NetworkConfig) {
    console.log(`Using network ${config.name}`)
    console.log(`Node: ${config.tezosNodeUrl}`)
    console.log(`BCD Instance: ${config.betterCallDevUrl}`)
}
