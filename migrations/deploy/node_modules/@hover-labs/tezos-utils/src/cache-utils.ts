/** Utilities for working with the Deploy cache */

import path from 'path'
import fs from 'fs'

const CACHE_FILE = path.join(process.cwd(), '/deploy-data.json')

/** Fetch the results from the cache, or run the fiven function. */
export async function fetchFromCacheOrRun<T>(key: string, runFunction: () => Promise<T | boolean>) {
    const deployCache = await getCache()

    if (deployCache.hasOwnProperty(key)) {
        console.log(`Loaded '${key}' from the cache!`)
        return deployCache[key]
    } else {
        let result = await runFunction()

        // If we have a void function, just set *something* json serializable (undefined is not)
        if (result === undefined) {
            result = true
        }

        deployCache[key] = result

        fs.writeFileSync(CACHE_FILE, JSON.stringify(deployCache, null, 2))
        return result
    }
}

/** Fetch a rsult from the cache */
export async function fetchFromCache<T>(key: string): Promise<T | undefined> {
    const deployCache = await getCache()
    if (deployCache.hasOwnProperty(key)) {
        return deployCache[key]
    } else {
        throw new Error(`key '${key}' not found in cache`)
    }
}

/** Retrieve the cache, creating a new one if it doesn't exist. */
async function getCache() {
    if (!fs.existsSync(CACHE_FILE)) {
        console.log(`Creating a new deploy cache at ${CACHE_FILE}`)
        fs.writeFileSync(CACHE_FILE, JSON.stringify({
            created: new Date()
        }))
    }

    return JSON.parse(fs.readFileSync(CACHE_FILE).toString())
}