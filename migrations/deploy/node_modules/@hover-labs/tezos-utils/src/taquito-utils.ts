/** Utilities for working with Taquito */

import { TezosToolkit } from "@taquito/taquito";
import NetworkConfig from "./types/network-config";
import { InMemorySigner } from "@taquito/signer";
import { Tzip16Module } from '@taquito/tzip16';

// The environment variable that holds the deployer key.
const PRIVATE_KEY_NAME = 'DEPLOY_SK'

// Whether or not a TezosToolkit has been initialized.
let INITIALIZED = false;

/** Get an InMemorySigner */
export const getSigner = async (config: NetworkConfig): Promise<InMemorySigner> => {
  // Get the private key - or throw if one isn't set.
  const privateKey = process.env[PRIVATE_KEY_NAME] || ''
  if (privateKey === '') {
    throw new Error(`Private key envar ${PRIVATE_KEY_NAME} must be set for operation!`)
  }

  const signer = await InMemorySigner.fromSecretKey(privateKey)

  // Reveal the account if needed
  await revealIfNeeded(privateKey, config)

  return signer
}

/** Get a TezosToolkit Singleton. */
export const getTezos = async (config: NetworkConfig) => {
  // Sanity check - we should call this method exactly once to get a global singleton.
  if (INITIALIZED === true) {
    throw new Error("TezosToolkit should be a singleton.")
  }
  INITIALIZED = true

  // Get a signer
  const signer = await getSigner(config)

  // Initialize a singleton
  const tezos = new TezosToolkit(config.tezosNodeUrl);
  tezos.setProvider({ signer })
  tezos.addExtension(new Tzip16Module());
  console.log(`Tezos initialized with signer: ${await signer.publicKeyHash()}`)

  return tezos
}

/** Reveal a public key if needed. */
const revealIfNeeded = async (privateKey: string, config: NetworkConfig) => {
  // TODO(keefertaylor): Implement this.
}