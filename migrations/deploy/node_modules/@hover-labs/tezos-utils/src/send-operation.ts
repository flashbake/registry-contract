/** Sends an operation to the blockchain. */

import { BigNumber } from 'bignumber.js'
import { OperationBatch } from "@taquito/taquito/dist/types/batch/rpc-batch-provider"
import checkConfirmed from './check-confirmed'
import { sleep } from './utils'
import NetworkConfig from './types/network-config'
import { TezosToolkit } from '@taquito/taquito'

async function sendOperation(
    config: NetworkConfig,
    Tezos: TezosToolkit,
    contractAddress: string,
    entrypoint: string,
    parameter: string | BigNumber | null | any[],
    amount: number = 0,
    batch?: OperationBatch
): Promise<string | undefined> {
    try {
        console.log(`Using amount: ${amount}`)
        console.log(`Using param: ${parameter}`)

        const contract = await Tezos.contract.at(contractAddress)

        let invocation
        if (Array.isArray(parameter)) {

            invocation = contract.methods[entrypoint].apply(null, parameter)
        } else if (parameter === null) {
            invocation = contract.methods[entrypoint]()
        } else {
            invocation = contract.methods[entrypoint](parameter)
        }

        if (batch !== undefined) {
            batch.withContractCall(invocation)
        } else {
            let result
            if (amount !== 0) {
                result = await invocation.send({ amount, mutez: true })
            } else {
                result = await invocation.send()
            }
            console.log(`Deployed in hash: ${result.hash}`)
            console.log('')

            console.log("Awaiting confirmation...")
            await checkConfirmed(config, result.hash)
            console.log("Confirmed!")

            return result.hash
        }

    } catch (e: any) {
        console.log('Caught exception, retrying...')
        console.log(e.message)
        console.error(e)
        await sleep(config.operationDelaySecs)

        return sendOperation(
            config,
            Tezos,
            contractAddress,
            entrypoint,
            parameter,
            amount
        )
    }
}

export default sendOperation