{"version":3,"file":"taquito-tzip12.umd.js","sources":["../src/tzip12-errors.ts","../src/tzip12-contract-abstraction.ts","../src/composer.ts","../src/tzip12-extension.ts","../src/version.ts"],"sourcesContent":["export class TokenMetadataNotFound implements Error {\n    name: string = 'TokenMetadataNotFound';\n    message: string;\n\n    constructor(public address: string) {\n        this.message = `No token metadata was found for the contract: ${address}`;\n    }\n}\n\nexport class TokenIdNotFound implements Error {\n    name: string = 'TokenIdNotFound';\n    message: string;\n\n    constructor(public tokenId: number) {\n        this.message = `Could not find token metadata for the token ID: ${tokenId}`;\n    }\n}\n\nexport class InvalidTokenMetadata implements Error {\n    name = 'InvalidTokenMetadata';\n    message = 'Non-compliance with the TZIP-012 standard. The required property `decimals` is missing.';\n}","import { MichelsonMap, Schema } from '@taquito/michelson-encoder';\nimport { ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';\nimport { Tzip16ContractAbstraction, MetadataContext, View, bytes2Char, MetadataInterface } from '@taquito/tzip16'\nimport { InvalidTokenMetadata, TokenIdNotFound, TokenMetadataNotFound } from './tzip12-errors';\n\nconst tokenMetadataBigMapType = {\n    prim: 'big_map',\n    args: [\n        { prim: 'nat' }, \n        { prim: 'pair', args: [\n            { prim: 'nat' , annots: ['%token_id']}, \n            { prim: \"map\", args: [{ prim: 'string' }, { prim: 'bytes' }], annots: ['%token_info'] }] }],\n    annots: ['%token_metadata']\n};\n\ntype BigMapId = { int: string };\n\nexport interface TokenMetadata {\n    token_id: number,\n    decimals: number\n    name?: string,\n    symbol?: string,\n}\n\nexport class Tzip12ContractAbstraction {\n    private _tzip16ContractAbstraction: Tzip16ContractAbstraction;\n\n    constructor(\n        private contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n        private context: MetadataContext\n    ) {\n        this._tzip16ContractAbstraction = new Tzip16ContractAbstraction(this.contractAbstraction, this.context)\n    }\n\n    /**\n     * @description Fetches the contract metadata (according to the Tzip-016 standard)\n     * @returns An object containing the metadata, the uri, an optional integrity check result and an optional sha256 hash \n     * or `Undefined` if the contract has no metadata (non-compliant with Tzip-016)\n     */\n    private async getContractMetadata() {\n        try {\n            const contractMetadata = await this._tzip16ContractAbstraction.getMetadata();\n            return contractMetadata.metadata;\n        } catch (err) {\n            // The contract is not compliant with Tzip-016. There is no contract metadata.\n        }\n    }\n\n    /**\n     * @description The Tzip-016 \"interfaces\" field MUST be present in the contract metadata. It should contain \"TZIP-012[version-info]\"\n     * @returns True if \"interfaces\" field is present and contains \"TZIP-012\", false otherwise\n     */\n    async isTzip12Compliant() {\n        let isCompliant = false;\n        const metadata = await this.getContractMetadata();\n        if (metadata) {\n            const tzip12Interface = metadata.interfaces?.filter((x) => {\n                return x.substring(0, 8) === \"TZIP-012\";\n            });\n            isCompliant = (tzip12Interface && tzip12Interface.length !== 0) ? true : false;\n        }\n        return isCompliant;\n    }\n\n    /**\n     * @description Fetches the token metadata for a specified token ID.\n     * The function first tries to find a `token_metadata` view in the contract metadata and to execute it with the token ID.\n     * If there is no view, the function tries to find a `token_metadata` bigmap in the top-level pairs of the storage.\n     * @param tokenId The ID of the token for which we want to retrieve token metadata\n     * @returns An object of type `TokenMetadata`\n     */\n    async getTokenMetadata(tokenId: number) {\n        const tokenMetadata = await this.retrieveTokenMetadataFromView(tokenId);\n        return (!tokenMetadata) ? this.retrieveTokenMetadataFromBigMap(tokenId) : tokenMetadata;\n    }\n\n    private async retrieveTokenMetadataFromView(tokenId: number) {\n        if (await this.getContractMetadata()) {\n            const views = await this._tzip16ContractAbstraction.metadataViews();\n            if (views && this.hasTokenMetadataView(views)) {\n                return this.executeTokenMetadataView(views['token_metadata'](), tokenId);\n            }\n        }\n    }\n\n    private hasTokenMetadataView(views: {}) {\n        for (let view of Object.keys(views)) {\n            if (view === 'token_metadata') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private async executeTokenMetadataView(tokenMetadataView: View, tokenId: number): Promise<TokenMetadata> {\n        let tokenMetadata;\n        try {\n            tokenMetadata = await tokenMetadataView.executeView(tokenId);\n        } catch (err) {\n            throw new TokenIdNotFound(tokenId);\n        }\n        const tokenMap = Object.values(tokenMetadata)[1];\n        if (!MichelsonMap.isMichelsonMap(tokenMap)) {\n            throw new TokenMetadataNotFound(this.contractAbstraction.address);\n        }\n        const metadataFromUri = await this.fetchTokenMetadataFromUri(tokenMap as MichelsonMap<string, string>);\n        return this.formatMetadataToken(tokenId, (tokenMap as MichelsonMap<string, string>), metadataFromUri);\n    }\n\n    private async fetchTokenMetadataFromUri(tokenMetadata: MichelsonMap<string, string>) {\n        const uri = tokenMetadata.get(\"\");\n        if (uri) {\n            try {\n                const metadataFromUri = await this.context.metadataProvider.provideMetadata(\n                    this.contractAbstraction,\n                    bytes2Char(uri),\n                    this.context\n                );\n                return metadataFromUri.metadata;\n            } catch (e) {\n                if (e.name === 'InvalidUri') {\n                    console.warn(`The URI ${bytes2Char(uri)} is present in the token metadata, but is invalid.`);\n                } else {\n                    throw e;\n                }\n            }\n        }\n    }\n\n    private formatMetadataToken(tokenId: number, metadataTokenMap: MichelsonMap<string, string>, metadataFromUri?: any): TokenMetadata {\n        const tokenMetadataDecoded = {\n            'token_id': tokenId\n        };\n        for (let keyTokenMetadata of metadataTokenMap.keys()) {\n            if (keyTokenMetadata === 'decimals') {\n                Object.assign(tokenMetadataDecoded, { [keyTokenMetadata]: Number(bytes2Char(metadataTokenMap.get(keyTokenMetadata)!)) });\n            }\n            else if (!(keyTokenMetadata === '')) {\n                Object.assign(tokenMetadataDecoded, { [keyTokenMetadata]: bytes2Char(metadataTokenMap.get(keyTokenMetadata)!) });\n            }\n        }\n        // if an URI is present, add the fetched properties to the object\n        // if a property is in the URI and the map, prevalence is accorded to value from the URI\n        if (metadataFromUri) {\n            for(let property in metadataFromUri) {\n                Object.assign(tokenMetadataDecoded, {[property]: metadataFromUri[property]})\n            }\n        }\n        if(!('decimals' in tokenMetadataDecoded)) {\n            throw new InvalidTokenMetadata();\n        } \n        return tokenMetadataDecoded;\n    }\n\n    private async retrieveTokenMetadataFromBigMap(tokenId: number) {\n        const bigmapTokenMetadataId = this.findTokenMetadataBigMap();\n        let pairNatMap;\n        try {\n            pairNatMap = await this.context.contract.getBigMapKeyByID<any>(\n                bigmapTokenMetadataId['int'].toString(),\n                tokenId.toString(),\n                new Schema(tokenMetadataBigMapType)\n            );\n        } catch (err) {\n            throw new TokenIdNotFound(tokenId);\n        }\n\n        const michelsonMap = pairNatMap['token_info'];\n        if (!MichelsonMap.isMichelsonMap(michelsonMap)) {\n            throw new TokenIdNotFound(tokenId);\n        }\n        const metadataFromUri = await this.fetchTokenMetadataFromUri(michelsonMap as MichelsonMap<string, string>);\n        return this.formatMetadataToken(tokenId, michelsonMap as MichelsonMap<string, string>, metadataFromUri)\n    }\n\n    private findTokenMetadataBigMap(): BigMapId {\n        const tokenMetadataBigMapId = this.contractAbstraction.schema.FindFirstInTopLevelPair<BigMapId>(\n            this.contractAbstraction.script.storage,\n            tokenMetadataBigMapType\n        );\n        if (!tokenMetadataBigMapId) {\n            throw new TokenMetadataNotFound(this.contractAbstraction.address);\n        }\n        return tokenMetadataBigMapId;\n    }\n\n\n}\n","import { Context, ContractAbstraction, ContractProvider, Wallet } from \"@taquito/taquito\";\nimport { Tzip12ContractAbstraction } from './tzip12-contract-abstraction'\nimport { MetadataContext } from \"@taquito/tzip16\"\n\nconst ABSTRACTION_KEY = Symbol(\"Tzip12ContractAbstractionObjectKey\");\n\nexport function tzip12<T extends ContractAbstraction<ContractProvider | Wallet>>(abs: T, context: Context) {\n    return Object.assign(abs, {\n        // namespace tzip12\n        tzip12 (this: ContractAbstraction<ContractProvider | Wallet> & { [ABSTRACTION_KEY]?: Tzip12ContractAbstraction}) {\n            if (!this[ABSTRACTION_KEY]) {\n                this[ABSTRACTION_KEY] = new Tzip12ContractAbstraction(this, context as MetadataContext);\n            }\n            \n            return this[ABSTRACTION_KEY]!\n        }\n    })\n}","import { Context, Extension } from \"@taquito/taquito\";\nimport { DEFAULT_HANDLERS, MetadataProviderInterface, MetadataProvider } from '@taquito/tzip16'\n\n// The same default metadataProvider is used for tzip16 and tzip12\nexport class Tzip12Module implements Extension {\n    private _metadataProvider: MetadataProviderInterface;\n\n    constructor(metadataProvider?: MetadataProviderInterface) {\n        this._metadataProvider = metadataProvider ? metadataProvider : new MetadataProvider(DEFAULT_HANDLERS);\n    }\n\n    configureContext(context: Context) {\n        Object.assign(context, { metadataProvider: this._metadataProvider });\n    }\n}","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"commitHash\": \"5711569ffaf481d88ba3251343a1788090b35dd4\",\n    \"version\": \"10.2.1\"\n};\n/* tslint:enable */\n"],"names":["Tzip16ContractAbstraction","MichelsonMap","bytes2Char","Schema","MetadataProvider","DEFAULT_HANDLERS"],"mappings":"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"}